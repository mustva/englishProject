@using englishProject.Infrastructure
@using englishProject.Models
@using Newtonsoft.Json
@{
    ViewBag.Title = "levelExam";

    LevelExam exam = ViewBag.exam;

    Level level = ViewBag.level;
    Layout = "~/Views/Shared/_LayoutExam.cshtml";
}
@section scripts
{
    <script type="text/javascript">

        var viewmodel = function (exams) {
            var self = this;
            var levelNumber = "@level.levelNumber";
            var kind = "@level.kind";
            var boxNumber = "@level.boxNumber";
            var okTextArray = new Array("Temel seviye tamamlandı.", "İleri seviye tamamlandı.", "Mükemmel seviye tamamlandı.");
            var questionTextArray = new Array("Türkçe çevirisi nedir ?", "İngilizce çevirisi nedir ?", "Kelimenin ingilizce karşılığını yazınız.");
            self.warningAppear = ko.observable(false); //sorun yanlış cevap verildiğinde doğru cevabın ortay çıkmasını sağlar
            self.index = ko.observable(0); //0 indexli kayıtı getirir
            self.exams = ko.observable(exams); //datanın tamamını çeker;
            self.dataQuestions = ko.observableArray(self.exams().Questions);//şıklar
            self.okText = ko.observable();//seviye tamamlandığında yazan yazı
            self.questionText = ko.observable(questionTextArray[self.exams().SubLevel - 1]); //  sub level ait soru cumlesi
            self.puan = self.exams().Puan;//sabit level puanı
            self.subLevelNumber = ko.observable(self.exams().SubLevel);//değişken sub level numarası
            self.totalPuan = ko.observable(self.exams().TotalPuan);//toplan puan
            self.currentQuestion = ko.observable(1);//güncel soru
            self.totalQuestions = ko.observable(self.dataQuestions().length);//sabit toplam soru
            self.totapInCorrect = ko.observable(0);// hata sayısı
            self.rate = (self.currentQuestion() / self.totalQuestions()) * 100;//sorunun yüzdelik karşılığı
            self.star = ko.observable(self.exams().Star);//yıldız sayısı
            self.updateWrapper = ko.observable(false);//updateWrapper
            self.loading = ko.observable(false);//loading
            self.textValue = ko.observable();//level 3'deki textboxdegeri
            self.updateUserProggress = function () {

                if (self.star() > 3) {
                    self.star(3);
                }

                self.userProgress = {
                    levelNumber: parseInt(levelNumber),
                    kind: parseInt(kind),
                    star: self.star(),
                    puan: Math.round(self.totalPuan()),
                    boxNumber: boxNumber

                }
                var jsonData = ko.toJSON(self.userProgress);
                $.ajax("/api/ajax/UpdateUserProgress", {
                    type: "POST",
                    data: jsonData,
                    contentType: "application/json",
                    success: function (data) {
                        alert(data);
                    }
                });

            }

            self.Questions = {
                Question: ko.observable(),
                QuestionCorrect: ko.observable(),
                QestionList: ko.observableArray()

            };

            self.Questions.Question(self.dataQuestions()[self.index()].Question);
            self.Questions.QuestionCorrect(self.dataQuestions()[self.index()].QuestionCorrect);
            self.Questions.QestionList(self.dataQuestions()[self.index()].QestionsOptions);

            self.successProgress = function (data) {

                var success = '<div class="progress-bar progress-bar-success" style="width: ' + data + '%"></div>';

                $(".progress").append(success);
            }
            self.errorProgress = function (data) {
                var success = '<div class="progress-bar progress-bar-danger" style="width: ' + data + '%"></div>';

                $(".progress").append(success);

            }

            self.warning = function (correct, correct2) {

                var veri = '<button class="btn btn-success btn-lg ">' + correct + '&nbsp;&nbsp;<i class="fa fa-hand-o-right"></i>&nbsp;&nbsp;' + correct2 + '</button>';

                $("#warningWrapper").empty();
                $("#warningWrapper").append("<strong>Doğru cevap:&nbsp;&nbsp;</strong>");
                $("#warningWrapper").append(veri);

                $("#btnsWrapper button").prop("disabled", true);

                self.warningAppear(true);

            }

            self.updateBtn = function () {

                self.loading(true);

                var jsonData = { subLevel: self.subLevelNumber() + 1, level: parseInt(levelNumber), kind: parseInt(kind) };

                $.ajax("/api/ajax/SubLevelQuestions", {
                    type: "GET",
                    data: jsonData,
                    contentType: "application/json",
                    success: function (data) {

                        self.exams(data);
                        self.subLevelNumber(self.exams().SubLevel);
                        self.dataQuestions(self.exams().Questions);
                        self.index(0);
                        self.currentQuestion(1);
                        self.totalQuestions(self.dataQuestions().length);

                        self.Questions.Question(self.dataQuestions()[self.index()].Question);
                        self.Questions.QuestionCorrect(self.dataQuestions()[self.index()].QuestionCorrect);
                        self.Questions.QestionList(self.dataQuestions()[self.index()].QestionsOptions);
                        self.updateWrapper(false);
                        $(".progress").empty();
                        self.loading(false);

                    }
                });

            }
            self.lavelUpdate = function () {

                self.questionText(questionTextArray[self.subLevelNumber()]);
                self.okText(okTextArray[self.subLevelNumber() - 1]);
                self.star(self.star() + 1);
                self.updateWrapper(true);
                self.updateUserProggress();
            };

            self.next = function () {
                if (self.currentQuestion() + 8 < self.totalQuestions()) {
                    self.textValue("");
                    var i = self.index() + 1;
                    self.index(i); // index 0 dan 1 çıkıyor
                    self.currentQuestion(self.index() + 1); // soru 1 den 2'ye çıkıyorr

                    self.Questions.Question(self.dataQuestions()[self.index()].Question);
                    self.Questions.QuestionCorrect(self.dataQuestions()[self.index()].QuestionCorrect);
                    self.Questions.QestionList(self.dataQuestions()[self.index()].QestionsOptions);

                } else {

                    if (self.totapInCorrect() < 4) {

                        self.lavelUpdate();
                    }
                }

            }
            self.nextBtn = function () {

                self.next();
                self.warningAppear(false);
                $("#btnsWrapper button").prop("disabled", false);

            }
            self.nextQuestion = function (data, event) {

                if ((data == self.Questions.QuestionCorrect()) || (self.textValue() == self.Questions.QuestionCorrect())) {

                    self.successProgress(self.rate);
                    var increasePuan = 0;

                    if (self.star() == 3) {
                        //3 yıldızda 1 katsayısı çarpılır
                        increasePuan = self.totalPuan() + self.subLevelNumber() * 1;
                    } else {
                        //3 yıldız alınmadıysa level tablosunun levelPuan katsayısıyla çarpılır
                        increasePuan = self.totalPuan() + self.subLevelNumber() * self.puan;
                    }

                    self.totalPuan(increasePuan);
                    self.next();

                } else {

                    //kalp sayısını arttır
                    var incorrect = self.totapInCorrect() + 1;
                    if (incorrect <= 3) {
                        self.totapInCorrect(incorrect);
                    } else {
                        //alert("3 yanlış oldu");
                    }

                    var decrease = self.totalPuan() - self.subLevelNumber() * self.puan * 0.7;
                    self.totalPuan(decrease);

                    self.errorProgress(self.rate);
                    self.warning(self.Questions.Question(), self.Questions.QuestionCorrect());

                }

            }

        }

        $(document).ready(function () {

            var vm = new viewmodel(@Html.HtmlConvertToJson(exam));

            ko.applyBindings(vm, document.getElementById("examWrapper"));
        });
    </script>

}

<div id="examWrapper">
    <div class="row">
        <div class="col-md-10 col-md-offset-1">
            <div class="row">
                <div class="col-md-8">

                    <ol class="breadcrumb examheader">
                        <li class="active"><strong>@level.Box.boxName </strong></li>
                        <li class="active"><strong>@level.levelName</strong> </li>
                        <li class="active"><strong>Seviye(@level.levelNumber)</strong> </li>
                    </ol>
                </div>
                <div class="col-md-4 text-right">

                    <ol class="breadcrumb examHeaderSubLevel">

                        <li data-bind="css: { subLevelActive:subLevelNumber()==1}" class="active">Temel <i class="fa fa-chevron-right"></i> </li>
                        <li data-bind="css: { subLevelActive:subLevelNumber()==2 }" class="active">İleri <i class="fa fa-chevron-right"></i></li>
                        <li data-bind="css: { subLevelActive:subLevelNumber()==3 }" class="active">Mükemmel</li>
                    </ol>
                </div>
            </div>

            <div class="panel">
                <div class="panel-body">
                    <div class="row">

                        <div class=" col-md-9">

                            <div class="progress">
                            </div>
                        </div>
                        <div class=" col-md-1">
                            <strong data-bind="text:currentQuestion()"></strong><strong> / </strong>
                            <strong data-bind="text:totalQuestions"></strong>
                        </div>
                        <div class=" col-md-2">

                            <span data-bind="visible:totapInCorrect()<1"><i class="fa fa-heart fa-2x heart-color"></i></span>
                            <span data-bind="visible:totapInCorrect()<2"><i class="fa fa-heart fa-2x heart-color"></i></span>
                            <span data-bind="visible:totapInCorrect()<3"><i class="fa fa-heart fa-2x heart-color"></i></span>
                        </div>
                    </div>
                    <hr />
                    <div class="row">
                        <div class="col-md-4 ">
                            <div class="btn btn-default disabled" type="button">
                                <i class="fa fa-tachometer"></i>  Puan: <span data-bind="text:totalPuan" class="badge"></span>
                            </div>

                            <div class="btn btn-default disabled">
                                <i class="fa fa-star" data-bind="css:{starColor:star()>0}"></i>

                                <i class="fa fa-star" data-bind="css:{starColor:star()>1}"></i>

                                <i class="fa fa-star" data-bind="css:{starColor:star()>2}"></i>
                            </div>
                        </div>
                        <div class="col-md-3">
                        </div>
                    </div>

                    <div class="row" data-bind="visible:!updateWrapper()">
                        <div class="col-md-12 text-center">
                            <h1 style="background-color: #F5F5F5;padding: 5px 30px;" class="img-thumbnail" data-bind="text:Questions.Question"></h1>
                            <h4 data-bind="text:questionText" class="text-muted"></h4>
                        </div>

                        <div data-bind="visible:subLevelNumber()<3" class="col-md-12 text-center">
                            <hr />
                            <div id="btnsWrapper" class="" data-bind="foreach:Questions.QestionList">

                                <button data-bind="click:$parent.nextQuestion,attr:{id:$data}" type="button" style=" border: 2px solid #3097d1;" class="btn btn-default btn-lg btn-level"><span data-bind="text:$data"></span></button>
                            </div>
                        </div>

                        <div data-bind="visible:subLevelNumber()>2" class="col-md-12 text-center">
                            <hr />
                            <div class="form-inline">
                                <div class="form-group form-group-lg">
                                    <input data-bind="value:textValue" class="form-control" style="margin: 3px;" type="text">
                                    <button id="btnControl" data-bind="click:nextQuestion" style="margin:3px;" class="btn btn-primary btn-lg form-control" type="button">Kontrol et</button>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="alert alert-success updateAlert" role="alert" data-bind="visible:updateWrapper()">
                        <div class="row">

                            <div class="col-md-1">
                                <i class="fa fa-thumbs-o-up fa-5x"></i>
                            </div>
                            <div id="warning" class="col-md-8 col-md-offset-1 text-center">
                                <p data-bind="text:okText"></p>
                                <div class="btn btn-default disabled" type="button">
                                    Kazanılan  puan: <span data-bind="text:totalPuan" class="badge"></span>
                                </div>

                                <div class="btn btn-default disabled">
                                    Kazanılan yıldız:
                                    <i class="fa fa-star" data-bind="css:{starColor:star()>0}"></i>

                                    <i class="fa fa-star" data-bind="css:{starColor:star()>1}"></i>

                                    <i class="fa fa-star" data-bind="css:{starColor:star()>2}"></i>
                                </div>
                            </div>
                            <div class="col-md-2">

                                <button data-bind="click:updateBtn,disable:loading" class=" btn btn-success btn-lg"><i data-bind="visible:loading" class="fa fa-refresh fa-spin"></i> Devam <i class="fa fa-arrow-right"></i></button>
                            </div>
                        </div>
                    </div>
                </div>

                <div data-bind="visible:warningAppear()" class="alert alert-danger examInCorrectAlert" role="alert">
                    <div class="row">
                        <div class="col-md-1">
                            <i class="fa fa-exclamation-triangle fa-3x"></i>
                        </div>
                        <div id="warningWrapper" class="col-md-8 col-md-offset-1 text-center">
                        </div>
                        <div class="col-md-2">
                            <button data-bind="click:nextBtn" class=" btn btn-primary btn-lg">Devam <i class="fa fa-arrow-right"></i></button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div>
</div>